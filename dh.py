from rsa import *

def puissances(p, g):
    print('Trouver les puissances')
    power = []
    for i in range(1, p):
        calcul = pow(g, i, p)

        if calcul != 0:
            power.append(calcul)

        if calcul == 1:
            return power

    # print(list(set(power)))
    return power


# q, p, g = decrypter_qpg()
p = 2641298775947504857678907788656154323642285007244573799014424669093250917504047127787643053087739866096834676436160774037328187883
g = 2641298775947504857678907788656154323642285007244573799014424669093250917504047127787643053087739866096834676436160774037328187882
q = 1320649387973752428839453894328077161821142503622286899507212334546625458752023563893821526543869933048417338218080387018664093941
# p = 17
# g = 13


# print(puissances(p, g))

x = 2641298775947504857678907788656154323642285007244573799014424669093250917504047127787643053087739866096834676436160774037328187882
y = 1

# print(f"g : {g}\np : {p}\ng^xy : {exposant_modulaire(g, x, p)}")


